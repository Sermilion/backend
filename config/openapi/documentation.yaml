openapi: 3.0.3
info:
  title: YapPeer API
  version: '1.0'
  description: API documentation for the YapPeer application.
servers:
  - url: '/' # Update with your base URL if needed

paths:
  /login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginParams'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /register:
    post:
      summary: User registration
      description: Registers a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationParams'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Username or email already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile:
    post:
      summary: Load user profile
      description: Load a user profile by username.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileParams'
      responses:
        '200':
          description: Profile loaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '400':
          description: Invalid username is provided
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Profile for the given username not found

  /self_profile:
    get:
      summary: Get user's own profile
      description: Retrieves the authenticated user's profile.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '404':
          description: User for given token not found
        '401':
          description: Unauthorized - Missing or invalid JWT token
        '400':
          description: Invalid username for given token

  /refresh_token:
    get:
      summary: Refresh JWT token
      description: Generates a new JWT token using a refresh token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Unauthorized - Invalid or expired refresh token

  /followers:
    post:
      summary: Get followers list
      description: List of users that a user is followed by
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscriptionsParams'
      responses:
        '200':
          description: Followers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowersResponse'
        '400':
          description: Bad request - Invalid request body
        '500':
          description: Internal server error

  /following:
    post:
      summary: Get following list
      description: List of users that a user is following
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscriptionsParams'
      responses:
        '200':
          description: Following users list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowersResponse'
        '400':
          description: Bad request - Invalid request body
        '500':
          description: Internal server error

  /tags:
    post:
      summary: Get followed tags list
      description: List of tags that a user is following
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTagsParams'
      responses:
        '200':
          description: Followed tags retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
        '400':
          description: Bad request - Invalid request body
        '500':
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginParams:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              detail:
                type: string

    RegistrationParams:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        repeatPassword:
          type: string
        email:
          type: string
      required:
        - username
        - password
        - email
        - repeatPassword

    RegisterResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        avatar:
          type: string
          nullable: true


    ProfileParams:
      type: object
      properties:
        username:
          type: string
      required:
        - username

    ProfileResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        username:
          type: string
        avatar:
          type: string
          nullable: true

    RefreshTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    UserSubscriptionsParams:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user whose followers to retrieve
        page:
          type: integer
          description: Page number for pagination
        pageSize:
          type: integer
          description: Number of items per page
      required:
        - userId
        - page
        - pageSize

    FollowersResponse:
      type: object
      properties:
        users:
          type: array
          description: List of followers
          items:
            $ref: '#/components/schemas/User'
        pagination:
          $ref: '#/components/schemas/Pagination'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        username:
          type: string
          description: User's username
        email:
          type: string
          description: User's email address
        avatar:
          type: string
          nullable: true
          description: URL of the user's avatar image

    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          description: Current page number
        totalPages:
          type: integer
          description: Total number of pages
        pageSize:
          type: integer
          description: Number of items per page

    UserTagsParams:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user whose followed tags to retrieve
        page:
          type: integer
          description: Page number for pagination
        pageSize:
          type: integer
          description: Number of items per page
      required:
        - userId
        - page
        - pageSize

    TagsResponse:
      type: object
      properties:
        tags:
          type: array
          description: List of followed tags
          items:
            $ref: '#/components/schemas/Tag'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Tag ID
        name:
          type: string
          description: Tag name